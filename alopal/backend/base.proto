syntax = "proto3";

package alopal.backend;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_package = "alopal.backend";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/api/http.proto";

message ResponseContext {
  google.rpc.Status status = 1;
  string request_id = 2;
  string correlation_id = 3;
}

message Iso8601DateTime{
  string time = 1;
}

message Currency{
  string amount = 1;
  string ISOType = 2;
}


message ImageAsset {
  string asset_id = 1;
}

message BareResponse{
  ResponseContext response_context = 1;
}


message RequestContext {
  Bearer bearer = 1;
  string request_id = 3;
}


message Bearer{
  oneof oneof_pagination {
    string token = 1;
    Captcha captcha = 2;
    string email_token_id = 3;
  }
}

message Captcha{
  string captcha_id = 1;
  string captcha_result = 2;
}

message Page {
  int64 page = 1;
  int32 count = 2;
}

message Pagination {
  Page first_page = 1;
  Page previous_page = 2;
  Page next_page = 3;
  Page last_page = 4;

}

message HTTP {
  // HTTP version.
  string version = 1;

  // HTTP method, e.g. `GET`, `POST`, etc.
  string method = 2;

  // HTTP request path.
  string path = 3;

  // HTTP response status code.
  int32 status_code = 4;

  // HTTP headers for request or response.
  map<string, string> headers = 5;
}

message TrakingInfo{
  string request_id = 1;
  string correlation_id = 2;
  repeated string  transaction_ids = 3;
  google.protobuf.Timestamp request_time = 4;
  google.protobuf.Timestamp response_time = 5;
  int32 duration = 6;
}

message LogEntryPayload {
  // Exact time of when the request is received or the response is sent.
  google.protobuf.Timestamp timestamp = 1;

  // HTTP status code, headers, etc.
  HTTP http = 2;

  // Parsed body object of request or response.
  google.protobuf.Any payload = 7;
}

// Transaction log for each request/response.
message LogEntry {
  // Transaction log entry ID.
  string id = 1;

  TrakingInfo traking_info = 13;

  // gRPC method name, e.g. `SessionService.Login`.
  string method_name = 2;

  // Request data sent by client.
  LogEntryPayload request = 3;

  // Response data generated by server.
  LogEntryPayload response = 4;

  // Debug information in case of throwing exception.
  //  LogEntryDebugInfo debug_info = 5;
  //
  //  // Client's user name and party ID, after login. For anonymous login, `phoneNumbers` is populated.
  //  solutions.saman.base.User user = 11;
  //
  //  // Client's device information.
  //  solutions.saman.base.Device device = 12;

  // Custom log data.
  map<string, string> custom = 31;
}