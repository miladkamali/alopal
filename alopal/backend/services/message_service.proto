syntax = "proto3";

package alopal.backend.services;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_package = "alopal.backend.services";
import "google/protobuf/wrappers.proto";
import "alopal/backend/session.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";
import "alopal/backend/message.proto";
service MessageService {
  //implemented
  rpc SendMessage(sendMessageRequest) returns (sendMessageResponse){
    option(google.api.http) = {
      post : "/api/message/send"
      body : "*"
    };
  };

  // implemented
// this API list all messages sent by user
  rpc ListSentMessages(ListMessagesRequest) returns (ListMessagesResponse){
    option(google.api.http) = {
      post : "/api/message/list/sent"
      body : "*"
    };
  };

  // implemented
  // this api list all the messages for a meeting
  // since message has a sender and receiver id, you can identify if you have send the message or received it
  // base on these ids.
  rpc ListMessagesForMeeting(ListMessageForMeeting) returns (ListMessagesResponse){
    option(google.api.http) = {
      post : "/api/message/list/meeting"
      body : "*"
    };
  };

  // implemented
  // this API list all messages received by user
  rpc ListReceivedMessages(ListMessagesRequest) returns (ListMessagesResponse){
    option(google.api.http) = {
      post : "/api/message/list/received"
      body : "*"
    };
  };

  // implemented
  // this API is called when user reads a message.
  // since we are delivering messages in bulk for each message that user reads
  // this api has to be called.
  rpc ReadMessage(SetMessageAsReadRequest) returns (SetMessageAsReadResponse){
    option(google.api.http) = {
      post : "/api/message/read"
      body : "*"
    };
  };

  // implemented
  // you can only delete messages that are not read yet!
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse){
    option(google.api.http) = {
      post : "/api/message/delete"
      body : "*"
    };
  };


  rpc ListCorrespondents(ListCorrespondantsRequest) returns (ListCorrespondantsResponse){
    option(google.api.http) = {
      post : "/api/message/list/correspondents"
      body : "*"
    };
  };


}