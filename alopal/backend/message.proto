syntax = "proto3";

package alopal.backend;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_package = "alopal.backend";
import "google/protobuf/wrappers.proto";
import "alopal/backend/base.proto";


message Message{
  google.protobuf.UInt64Value senderUserId = 1;
  google.protobuf.UInt64Value receiverUserId = 2;
  google.protobuf.UInt64Value messageId = 3;
  // optional: if a message is on a meeting, meeting id has to be added
  google.protobuf.UInt64Value meetingId = 4;
  string title = 5;
  string content = 6;
  Iso8601DateTime sendTime = 7;
}

message MessageStatusContainer{
  Message message = 1;
  bool isRead = 2;
}

message sendMessageRequest {
  RequestContext request_context = 1;
  Message message = 2;
}

message ListCorrespondantsRequest{
  RequestContext request_context = 1;
}

message Correspondant{
  string firstName = 1;
  string lastName = 2;
  string avatarLink = 3;
  uint64 userId = 4;
}
message ListCorrespondantsResponse{
  ResponseContext response_context = 1 ;
  repeated Correspondant correspondants = 2;

}

message sendMessageResponse {
  ResponseContext response_context = 1 ;
}

message DeleteMessageRequest{
  RequestContext request_context = 1;
  uint64 messageId = 2;
}

message DeleteMessageResponse{
  ResponseContext response_context = 1 ;
}

message SetMessageAsReadRequest {
  RequestContext request_context = 1;
  uint64 messageId = 2;
}

message SetMessageAsReadResponse {
  ResponseContext response_context = 1 ;
}


message ListMessageForMeeting{
  RequestContext request_context = 1;
  //optional: if you need messages on a meeting you should add meeting id otherwise you are receiving all the messages
  google.protobuf.UInt64Value meetingId = 2;
}

message ListMessagesRequest {
  RequestContext request_context = 1;
}

message ListMessagesResponse{
  ResponseContext response_context = 1 ;
  repeated MessageStatusContainer messages = 2;
}
